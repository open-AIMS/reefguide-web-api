@baseUrl = {{$dotenv API_BASE_URL}}
@contentType = application/json

### Load environment variables
# @name loadEnv
GET {{baseUrl}}
Content-Type: {{contentType}}

### Register a new user
# @name register
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
    "email": "testuser@example.com",
    "password": "securepassword123"
}

### Login with the registered user
# @name login
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
    "email": "testuser@example.com",
    "password": "securepassword123"
}

### Store the JWT token from the login response
@authToken = {{login.response.body.token}}
@refreshToken = {{login.response.body.refreshToken}}

### Use refresh to get new token
# @name refresh
POST {{baseUrl}}/auth/token
Content-Type: {{contentType}}

{
    "refreshToken" : "{{refreshToken}}"
}

### Get user profile (protected route)
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{authToken}}

### Try to access profile without token (should fail)
GET {{baseUrl}}/auth/profile

### Register with existing username (should fail)
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
    "email": "testuser@example.com",
    "password": "anotherpassword123"
}

### Login with wrong password (should fail)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
    "email": "testuser@example.com",
    "password": "securepassword1234"
}


### POLYGONS

### Create a new polygon
# @name createPolygon
POST {{baseUrl}}/polygons
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "geoJson": "{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,1],[1,1],[1,0],[0,0]]]}"
}

### Get all polygons for the user
GET {{baseUrl}}/polygons
Authorization: Bearer {{authToken}}

### Get a specific polygon
@polygonId = {{createPolygon.response.body.polygon.id}}
GET {{baseUrl}}/polygons/{{polygonId}}
Authorization: Bearer {{authToken}}

### Update a polygon
PUT {{baseUrl}}/polygons/{{polygonId}}
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "geoJson": "{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,2],[2,2],[2,0],[0,0]]]}"
}

### Try to update a non-existent polygon (should fail)
PUT {{baseUrl}}/polygons/999999
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "geoJson": "{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,1],[1,1],[1,0],[0,0]]]}"
}

### Delete a polygon
DELETE {{baseUrl}}/polygons/{{polygonId}}
Authorization: Bearer {{authToken}}

### Try to delete a non-existent polygon (should fail)
DELETE {{baseUrl}}/polygons/999999
Authorization: Bearer {{authToken}}

### NOTES

### Create a new note
# @name createNote
POST {{baseUrl}}/notes
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "content": "This is a test note",
    "polygonId": {{polygonId}}
}

### Get all notes for the user
GET {{baseUrl}}/notes
Authorization: Bearer {{authToken}}

### Get all notes for a specific polygon
GET {{baseUrl}}/notes/{{polygonId}}
Authorization: Bearer {{authToken}}

### Update a note
@noteId = {{createNote.response.body.note.id}}
PUT {{baseUrl}}/notes/{{noteId}}
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "content": "This is an updated test note"
}

### Try to update a non-existent note (should fail)
PUT {{baseUrl}}/notes/999999
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "content": "This update should fail"
}

### ERROR CONDITIONS

### Try to create a polygon without authentication (should fail)
POST {{baseUrl}}/polygons
Content-Type: {{contentType}}

{
    "geoJson": "{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,1],[1,1],[1,0],[0,0]]]}"
}

### Try to create a note for a non-existent polygon (should fail)
POST {{baseUrl}}/notes
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "content": "This note creation should fail",
    "polygonId": 999999
}

### Try to get notes for a non-existent polygon (should fail)
GET {{baseUrl}}/notes/999999
Authorization: Bearer {{authToken}}

### Try to update a polygon with invalid GeoJSON (should fail)
PUT {{baseUrl}}/polygons/{{polygonId}}
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "geoJson": "This is not valid GeoJSON"
}

### Try to create a note without content (should fail)
POST {{baseUrl}}/notes
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "polygonId": {{polygonId}}
}

### Try to access a polygon belonging to another user (should fail)
# Note: This assumes the existence of another user's polygon. You may need to adjust the ID.
GET {{baseUrl}}/polygons/1
Authorization: Bearer {{authToken}}

### CLUSTER MANAGEMENT
# Note: These endpoints require admin privileges

### Get current cluster status
GET {{baseUrl}}/admin/status
Authorization: Bearer {{authToken}}

### Scale cluster to specific size
POST {{baseUrl}}/admin/scale
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "desiredCount": 1
}

### Try to scale cluster without auth (should fail)
POST {{baseUrl}}/admin/scale
Content-Type: {{contentType}}

{
    "desiredCount": 1
}

### Try to scale cluster with invalid count (below min) (should fail)
POST {{baseUrl}}/admin/scale
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "desiredCount": -1
}

### Try to scale cluster with invalid count (above max) (should fail)
POST {{baseUrl}}/admin/scale
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "desiredCount": 11
}

### Try to scale cluster with non-numeric value (should fail)
POST {{baseUrl}}/admin/scale
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "desiredCount": "three"
}

### Try to scale cluster with missing desiredCount (should fail)
POST {{baseUrl}}/admin/scale
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### Scale cluster down to minimum size
POST {{baseUrl}}/admin/scale
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "desiredCount": 0
}

### Get cluster status after scaling (to verify)
GET {{baseUrl}}/admin/status
Authorization: Bearer {{authToken}}

### Force redeploy of service
POST {{baseUrl}}/admin/redeploy
Authorization: Bearer {{authToken}}

### Get status after redeployment initiation
GET {{baseUrl}}/admin/status
Authorization: Bearer {{authToken}}

### USER MANAGEMENT
# Note: These endpoints require admin privileges

### Get all users
GET {{baseUrl}}/users
Authorization: Bearer {{authToken}}

### Create a new user (as admin)
# @name createUser
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "email": "newuser@example.com",
    "password": "securepassword123",
    "roles": ["ADMIN"]
}

### Store the created user ID
@userId = {{createUser.response.body.id}}

### Get specific user by ID
GET {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}

### Update user roles
PUT {{baseUrl}}/users/{{userId}}/roles
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "roles": []
}

### Update user password
PUT {{baseUrl}}/users/{{userId}}/password
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "password": "newSecurePassword123"
}

### Delete user
DELETE {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}

### Verify user was deleted (should return 404)
GET {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}

### Create multiple users for listing
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "email": "user1@example.com",
    "password": "securepassword123",
    "roles": []
}

###
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "email": "user2@example.com",
    "password": "securepassword123",
    "roles": ["ADMIN"]
}

### Get updated user list
GET {{baseUrl}}/users
Authorization: Bearer {{authToken}}

### JOB SYSTEM TESTS

### Create a new criteria polygons job
# @name createJob
POST {{baseUrl}}/jobs
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "type": "CRITERIA_POLYGONS",
    "inputPayload": {
    }
}

### Store the job ID for further operations
@jobId = {{createJob.response.body.jobId}}

### Poll for available jobs (worker endpoint)
# @name pollJobs
GET {{baseUrl}}/jobs/poll
Content-Type: {{contentType}}

### Poll for specific job type
GET {{baseUrl}}/jobs/poll?jobType=CRITERIA_POLYGONS
Content-Type: {{contentType}}

### Assign job to worker
# @name assignJob
POST {{baseUrl}}/jobs/assign
Content-Type: {{contentType}}

{
    "jobId": {{jobId}},
    "ecsTaskArn": "arn:aws:ecs:region:account:task/cluster/task-id",
    "ecsClusterArn": "arn:aws:ecs:region:account:cluster/cluster-name"
}

### Store the assignment ID
@assignmentId = {{assignJob.response.body.assignment.id}}

### Submit successful job result
POST {{baseUrl}}/jobs/assignments/{{assignmentId}}/result
Content-Type: {{contentType}}

{
    "status": "SUCCEEDED",
    "resultPayload": {
    }
}

### Submit failed job result
POST {{baseUrl}}/jobs/assignments/{{assignmentId}}/result
Content-Type: {{contentType}}

{
    "status": "FAILED",
    "resultPayload": {
        "error": "Failed to process polygons",
        "details": "Invalid polygon geometry"
    }
}

### Get job details (as owner)
GET {{baseUrl}}/jobs/{{jobId}}
Authorization: Bearer {{authToken}}

### Cancel a job
POST {{baseUrl}}/jobs/{{jobId}}/cancel
Authorization: Bearer {{authToken}}

### Download job results
GET {{baseUrl}}/jobs/{{jobId}}/download
Authorization: Bearer {{authToken}}

### Download job results with custom expiry
GET {{baseUrl}}/jobs/{{jobId}}/download?expirySeconds=7200
Authorization: Bearer {{authToken}}

### ERROR CASES

### Try to create job without authentication
POST {{baseUrl}}/jobs
Content-Type: {{contentType}}

{
    "type": "CRITERIA_POLYGONS",
    "inputPayload": {}
}

### Try to create job with invalid type
POST {{baseUrl}}/jobs
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "type": "INVALID_TYPE",
    "inputPayload": {}
}

### Try to create job with invalid payload schema
POST {{baseUrl}}/jobs
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "type": "CRITERIA_POLYGONS",
    "inputPayload": {
        "invalidField": true
    }
}

### Try to assign already assigned job
POST {{baseUrl}}/jobs/assign
Content-Type: {{contentType}}

{
    "jobId": {{jobId}},
    "ecsTaskArn": "arn:aws:ecs:region:account:task/cluster/another-task",
    "ecsClusterArn": "arn:aws:ecs:region:account:cluster/another-cluster"
}

### Try to submit result for non-existent assignment
POST {{baseUrl}}/jobs/assignments/999999/result
Content-Type: {{contentType}}

{
    "status": "SUCCEEDED",
    "resultPayload": {}
}

### Try to submit result with invalid status
POST {{baseUrl}}/jobs/assignments/{{assignmentId}}/result
Content-Type: {{contentType}}

{
    "status": "INVALID_STATUS",
    "resultPayload": {}
}

### Try to cancel completed job
POST {{baseUrl}}/jobs/{{jobId}}/cancel
Authorization: Bearer {{authToken}}

### Try to access job details of another user's job
# Note: This assumes job ID 999999 belongs to another user
GET {{baseUrl}}/jobs/999999
Authorization: Bearer {{authToken}}

### Try to download results of incomplete job
# Create new job for this test
POST {{baseUrl}}/jobs
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
    "type": "CRITERIA_POLYGONS",
    "inputPayload": {}
}

### Try download (should fail as job is not complete)
GET {{baseUrl}}/jobs/{{jobId}}/download
Authorization: Bearer {{authToken}}